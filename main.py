from typing import List
from abc import ABC, abstractmethod
import random

class Player(ABC):
    def __init__(self, name: str, marker: str) -> None:
        self.name = name
        self.marker = marker

    @abstractmethod
    def get_move(self, board: List[str]) -> int:
        pass

class HumanPlayer(Player):
    def get_move(self, board: List[str]) -> int:
        while True:
            try:
                move = int(input(f"{self.name}, enter a move (1-9): "))
                if move in range(1, 10):
                    index = move - 1
                    if board[index] == " ":
                        return index
            except ValueError:
                pass

class Board:
    def __init__(self) -> None:
        self.state = [" " for _ in range(9)]

    def __getitem__(self, index: int) -> str:
        return self.state[index]

    def __setitem__(self, index: int, value: str) -> None:
        self.state[index] = value

    def is_full(self) -> bool:
        return all(marker != " " for marker in self.state)

    def check_winner(self) -> str:
        for i in range(0, 9, 3):
            if self.state[i] == self.state[i+1] == self.state[i+2] != " ":
                return self.state[i]

        for i in range(3):
            if self.state[i] == self.state[i+3] == self.state[i+6] != " ":
                return self.state[i]

        if self.state[0] == self.state[4] == self.state[8] != " ":
            return self.state[0]

        if self.state[2] == self.state[4] == self.state[6] != " ":
            return self.state[2]

        if self.is_full():
            return "TIE"

        return ""

class TextUI(ABC):
    @abstractmethod
    def display_board(self, board: List[str]) -> None:
        pass

    @abstractmethod
    def get_move(self, player_name: str) -> int:
        pass

    @abstractmethod
    def display_winner(self, winner: str) -> None:
        pass

class ConsoleTextUI(TextUI):
    def display_board(self, board: List[str]) -> None:
        print("   |   |")
        print(f" {board[0]} | {board[1]} | {board[2]} ")
        print("   |   |")
        print("-----------")
        print("   |   |")
        print(f" {board[3]} | {board[4]} | {board[5]} ")
        print("   |   |")
        print("-----------")
        print("   |   |")
        print(f" {board[6]} | {board[7]} | {board[8]} ")
        print("   |   |")

    def get_move(self, player_name: str) -> int:
        while True:
            try:
                move = int(input(f"{player_name}, enter a move (1-9): "))
                if move in range(1, 10):
                    return move - 1
            except ValueError:
                pass

    def display_winner(self, winner: str) -> None:
        if winner == "TIE":
            print("Tie game!")
        else:
            print(f"{winner} wins!")

class GameController:
    def __init__(self, ui: TextUI, player1: Player, player2: Player) -> None:
        self.ui = ui
        self.players = [player1, player2]
        self.board = Board()

    def start(self) -> None:
        current_player = self.players[0]

        while True:
            self.ui.display_board(self.board.state)
            move = current_player.get_move(self.board.state)
            self.board[move] = current_player.marker
            winner = self.board.check_winner()

            if winner != "":
                self.ui.display_board(self.board.state)
                self.ui.display_winner(winner)
                break
            elif self.board.is_full():
                self.ui.display_board(self.board.state)
                self.ui.display_winner("TIE")
                break

            current_player = self.players[(self.players.index(current_player) + 1) % 2]

class Runner:
    @staticmethod
    def select_ui() -> TextUI:
        while True:
            try:
                choice = int(input("Select UI: 1) Console Text UI 2) GUI "))
                if choice == 1:
                    return ConsoleTextUI()
            except ValueError:
                pass

    @staticmethod
    def select_player(marker: str) -> Player:
        while True:
            try:
                choice = int(input(f"Select player for {marker}: 1) Human 2) AI "))
                if choice == 1:
                    return HumanPlayer(f"Player {marker}", marker)
            except ValueError:
                pass

    @staticmethod
    def main() -> None:
        ui = Runner.select_ui()
        player1 = Runner.select_player("X")
        player2 = Runner.select_player("O")
        random.shuffle([player1, player2])
        game_controller = GameController(ui, player1, player2)
        game_controller.start()

if __name__ == "__main__":
    Runner.main()
